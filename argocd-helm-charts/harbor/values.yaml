---
harbor:
  persistence:
    enabled: true
    persistentVolumeClaim:
      registry:
        size: 20Gi
  core:
    revisionHistoryLimit: 0
    initContainers:
      - name: pgchecker
        image: docker.io/busybox:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
        command:
          - sh
          - -c
          - |
            echo 'Waiting for PostgreSQL to become ready...'
            until printf "." && nc -z -w 2 harbor-pgsql-rw 5432; do
                sleep 2;
            done;
            echo 'PostgreSQL OK ✓'
        resources:
          requests:
            cpu: "2m"
            memory: "5Mi"
          limits:
            memory: "5Mi"
      - name: redischecker
        image: docker.io/busybox:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
        command:
          - sh
          - -c
          - |
            echo 'Waiting for Redis master to become ready...'
            until printf "." && nc -z -w 2 harbor-redis 6379; do
                sleep 2;
            done;
            echo 'Redis master OK ✓'
        resources:
          requests:
            cpu: "2m"
            memory: "5Mi"
          limits:
            memory: "5Mi"
  jobservice:
    revisionHistoryLimit: 0
    initContainers:
      - name: harbor-core-checker
        image: docker.io/busybox:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
        command:
          - sh
          - -c
          - |
            echo 'Waiting for Harbor core service to become ready...'
            until printf "." && nc -z -w 2 harbor-core 80; do
                sleep 2;
            done;
            echo 'Harbor core service OK ✓'
        resources:
          requests:
            cpu: "2m"
            memory: "5Mi"
          limits:
            memory: "5Mi"
  portal:
    revisionHistoryLimit: 0
  registry:
    revisionHistoryLimit: 0
  database:
    type: external
    external:
      host: harbor-pgsql-rw
      username: harbor
      existingSecret: harbor-pgsql-app
  redis:
    type: external
    external:
      addr: harbor-redis:6379

postgres:
  size: 3Gi
  recover: false
  pass: harbor-pgsql-app
  resources:
    limits:
      memory: 800Mi
      cpu: 250m
    requests:
      memory: 500Mi
      cpu: 250m

redis:
  replicas: 3
  name: harbor-redis
  storage: 4Gi
