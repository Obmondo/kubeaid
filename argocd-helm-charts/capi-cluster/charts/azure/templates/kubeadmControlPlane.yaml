apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: {{ .Values.global.clusterName }}-control-plane
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
          service-account-issuer: {{ .Values.serviceAccountIssuer.url }}
          service-account-key-file: "/etc/kubernetes/pki/sa.pub"
          service-account-signing-key-file: "/etc/kubernetes/pki/sa.key"
        timeoutForControlPlane: 20m0s
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "true"
          cloud-provider: external
          cluster-name: {{ .Values.global.clusterName }}
          service-account-private-key-file: "/etc/kubernetes/pki/sa.key"
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
    diskSetup:
      filesystems:
        - device: /dev/disk/azure/scsi1/lun0
          extraOpts:
            - -E
            - lazy_itable_init=1,lazy_journal_init=1
          filesystem: ext4
          label: etcd_disk
        - device: ephemeral0.1
          filesystem: ext4
          label: ephemeral0
          replaceFS: ntfs
      partitions:
        - device: /dev/disk/azure/scsi1/lun0
          layout: true
          overwrite: false
          tableType: gpt
    files:
      - content: |
          net.ipv4.conf.lxc*.rp_filter = 0
        owner: root:root
        path: /etc/sysctl.d/99-cilium.conf
        permissions: "0744"
      - content: |
          overlay
          br_netfilter
        owner: root:root
        path: /etc/modules-load.d/crio.conf
        permissions: "0744"
      - content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        owner: root:root
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        permissions: "0744"
      - content: |
          vm.overcommit_memory=1
          kernel.panic=10
          kernel.panic_on_oops=1
        owner: root:root
        path: /etc/sysctl.d/99-kubelet.conf
        permissions: "0744"
      - content: |
          nameserver 1.1.1.1
          nameserver 1.0.0.1
          nameserver 2606:4700:4700::1111
        owner: root:root
        path: /etc/kubernetes/resolv.conf
        permissions: "0744"
      - content: |
          # Copyright The containerd Authors.
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #     http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.
          #
          # https://raw.githubusercontent.com/containerd/containerd/main/containerd.service

          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target local-fs.target dbus.service

          [Service]
          ExecStartPre=-/sbin/modprobe overlay
          ExecStart=/usr/local/bin/containerd

          Type=notify
          Delegate=yes
          KillMode=process
          Restart=always
          RestartSec=5

          # Having non-zero Limit*s causes performance problems due to accounting overhead
          # in the kernel. We recommend using cgroups to do container-local accounting.
          LimitNPROC=infinity
          LimitCORE=infinity

          # Comment TasksMax if your systemd version does not supports it.
          # Only systemd 226 and above support this version.
          TasksMax=infinity
          OOMScoreAdjust=-999

          [Install]
          WantedBy=multi-user.target
        owner: root:root
        path: /etc/systemd/system/containerd.service
        permissions: "0744"
      - contentFrom:
          secret:
            name: service-account-issuer-keys
            key: public
        owner: root:root
        path: "/etc/kubernetes/pki/sa.pub"
        permissions: "0644"
      - contentFrom:
          secret:
            name: service-account-issuer-keys
            key: private
        owner: root:root
        path: "/etc/kubernetes/pki/sa.key"
        permissions: "0644"
      {{- if ((.Values.controlPlane).apiServer).files }}
      {{- ((.Values.controlPlane).apiServer).files | toYaml | nindent 6 }}
      {{- end }}
      {{/* Automated tools that use Azure services should always have restricted permissions to
           ensure that Azure resources are secure. Therefore, instead of having applications sign
           in as a fully privileged user, Azure offers service principals.
           An Azure service principal is an identity created for use with applications, hosted
           services, and automated tools. This identity is used to access resources.
           REFERENCE : https://learn.microsoft.com/en-us/cli/azure/azure-cli-sp-tutorial-1 */}}
      - contentFrom:
          secret:
            key: control-plane-azure.json
            name: {{ .Values.global.clusterName }}-control-plane-azure-json
        owner: root:root
        path: /etc/kubernetes/azure.json
        permissions: "0644"
    initConfiguration:
      skipPhases:
        - addon/kube-proxy
      nodeRegistration:
        kubeletExtraArgs:
          anonymous-auth: "false"
          cloud-provider: external
        name: '{{"{{"}} ds.meta_data.local_hostname {{"}}"}}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          anonymous-auth: "false"
          cloud-provider: external
        name: '{{"{{"}} ds.meta_data.local_hostname {{"}}"}}'
    mounts:
      - - LABEL=etcd_disk
        - /var/lib/etcddisk
    preKubeadmCommands:
      - set -x
      - export CONTAINERD=1.7.26
      - export RUNC=1.2.5
      - export KUBERNETES_VERSION=$(echo {{ $.Values.global.kubernetes.version }} | sed 's/^v//')
      - export TRIMMED_KUBERNETES_VERSION=$(echo ${KUBERNETES_VERSION} | sed 's/^v//'
        | awk -F . '{print $1 "." $2}')
      - ARCH="$(dpkg --print-architecture)"
      - localectl set-locale LANG=en_US.UTF-8
      - localectl set-locale LANGUAGE=en_US.UTF-8
      - apt-get update -y
      - apt-get -y install at jq unzip wget socat mtr logrotate apt-transport-https
      - sed -i '/swap/d' /etc/fstab
      - swapoff -a
      - modprobe overlay && modprobe br_netfilter && sysctl --system
      - wget https://github.com/opencontainers/runc/releases/download/v$RUNC/runc.$ARCH
      - wget https://github.com/opencontainers/runc/releases/download/v$RUNC/runc.sha256sum
      - sha256sum --check --ignore-missing runc.sha256sum
      - install runc.$ARCH /usr/local/sbin/runc
      - rm -f runc.$ARCH runc.sha256sum
      - wget https://github.com/containerd/containerd/releases/download/v$CONTAINERD/containerd-$CONTAINERD-linux-$ARCH.tar.gz
      - wget https://github.com/containerd/containerd/releases/download/v$CONTAINERD/containerd-$CONTAINERD-linux-$ARCH.tar.gz.sha256sum
      - sha256sum --check containerd-$CONTAINERD-linux-$ARCH.tar.gz.sha256sum
      - tar -zxf containerd-$CONTAINERD-linux-$ARCH.tar.gz -C /usr/local
      - rm -f containerd-$CONTAINERD-linux-$ARCH.tar.gz containerd-$CONTAINERD-linux-$ARCH.tar.gz.sha256sum
      - mkdir -p /etc/containerd
      - containerd config default > /etc/containerd/config.toml
      - sed -i  "s/SystemdCgroup = false/SystemdCgroup = true/" /etc/containerd/config.toml
      - systemctl daemon-reload && systemctl enable containerd && systemctl start containerd
      - mkdir -p /etc/apt/keyrings/
      - curl -fsSL https://pkgs.k8s.io/core:/stable:/v$TRIMMED_KUBERNETES_VERSION/deb/Release.key
        | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      - echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$TRIMMED_KUBERNETES_VERSION/deb/
        /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      - apt-get update
      - apt-get install -y kubelet="$KUBERNETES_VERSION-*" kubeadm="$KUBERNETES_VERSION-*"
        kubectl="$KUBERNETES_VERSION-*" bash-completion && apt-mark hold kubelet kubectl
        kubeadm && systemctl enable kubelet
      - kubeadm config images pull --kubernetes-version $KUBERNETES_VERSION
      - echo 'source <(kubectl completion bash)' >>/root/.bashrc
      - echo 'export KUBECONFIG=/etc/kubernetes/admin.conf' >>/root/.bashrc
      - apt-get -y autoremove && apt-get -y clean all
    postKubeadmCommands:
      # Install Helm.
      - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      # Clone KubeAid.
      - git clone https://github.com/Obmondo/kubeaid.git
      # Copy kubeconfig to ~/.kube/config
      - mkdir -p $HOME/.kube
      - sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      - sudo chown $(id -u):$(id -g) $HOME/.kube/config
      # Install Cilium.
      - kubectl create namespace cilium
      - API_SERVER_URL=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
      - API_SERVER_HOST=$(echo "$API_SERVER_URL" | awk -F[/:] '{print $4}')
      - API_SERVER_PORT=$(echo "$API_SERVER_URL" | awk -F[/:] '{print $5}')
      - |
        helm template kubeaid/argocd-helm-charts/cilium \
          --values kubeaid/argocd-helm-charts/cilium/values.yaml \
          --set cilium.kubeProxyReplacement=true \
          --set cilium.k8sServiceHost=${API_SERVER_HOST} \
          --set cilium.k8sServicePort=${API_SERVER_PORT} \
          --namespace cilium | kubectl apply -f -
      # Install Azure Cloud Controller Manager.
      - helm template kubeaid/argocd-helm-charts/ccm-azure --set cloud-provider-azure.infra.clusterName={{ .Values.global.clusterName }} --namespace kube-system | kubectl apply -f -

      # Delete password for the root user.
      - passwd -d root
    {{- if and ($.Values.global.additionalUsers) (gt (len $.Values.global.additionalUsers) 0) }}
    users:
      {{- range $index, $additionalUser := $.Values.global.additionalUsers }}
      - name: {{ $additionalUser.name }}
        sshAuthorizedKeys:
          - {{ $additionalUser.sshPublicKey }}
      {{- end }}
    {{- end }}
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: {{ .Values.global.clusterName }}-control-plane
  replicas: {{ .Values.controlPlane.replicas }}
  version: {{ .Values.global.kubernetes.version }}
