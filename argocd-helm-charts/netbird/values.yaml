externalDatabases:
  netbird:
    size: 8Gi
    recover: false
    pass: netbird-pgsql-app
    logicalbackup:
      enabled: true

netbird:
  fullnameOverride: netbird
  management:
    configmap: |-
      {
        "Stuns": [
          {
            "Proto": "udp",
            "URI": "{{ .STUN_SERVER }}",
            "Username": "",
            "Password": ""
          }
        ],
        "TURNConfig": {
          "TimeBasedCredentials": false,
          "CredentialsTTL": "12h0m0s",
          "Secret": "secret",
          "Turns": [
            {
              "Proto": "udp",
              "URI": "{{ .TURN_SERVER }}",
              "Username": "{{ .TURN_SERVER_USER }}",
              "Password": "{{ .TURN_SERVER_PASSWORD }}"
            }
          ]
        },
        "Relay": {
          "Addresses": ["rels://vpn.example.com:443/relay"],
          "CredentialsTTL": "24h",
          "Secret": "{{ .RELAY_PASSWORD }}"
        },
        "Signal": {
          "Proto": "https",
          "URI": "vpn.example.com:443",
          "Username": "",
          "Password": ""
        },
        "Datadir": "/var/lib/netbird/",
        "DataStoreEncryptionKey": "{{ .DATASTORE_ENCRYPTION_KEY }}",
        "HttpConfig": {
          "LetsEncryptDomain": "",
          "CertFile": "",
          "CertKey": "",
          "AuthAudience": "{{ .IDP_CLIENT_ID }}",
          "AuthIssuer": "https://keycloak.example.com/auth/realms/netbird",
          "AuthUserIDClaim": "",
          "AuthKeysLocation": "https://keycloak.example.com/auth/realms/netbird/protocol/openid-connect/certs",
          "OIDCConfigEndpoint": "https://keycloak.example.com/auth/realms/netbird/.well-known/openid-configuration",
          "IdpSignKeyRefreshEnabled": false
        },
        "IdpManagerConfig": {
          "ManagerType": "keycloak",
          "ClientConfig": {
            "Issuer": "https://keycloak.example.com/auth/realms/netbird/.well-known/openid-configuration",
            "TokenEndpoint": "https://keycloak.example.com/auth/realms/netbird/protocol/openid-connect/token",
            "ClientID": "{{ .IDP_CLIENT_MGMT_ID }}",
            "ClientSecret": "{{ .IDP_CLIENT_MGMT_SECRET }}",
            "GrantType": "client_credentials"
          },
          "ExtraConfig": {
            "Password": "{{ .IDP_SERVICE_ACCOUNT_PASSWORD }}",
            "Username": "{{ .IDP_SERVICE_ACCOUNT_USER }}",
            "AdminEndpoint": "https://keycloak.example.com/auth/admin/realms/netbird"
          },
          "KeycloakClientCredentials": null
        },
        "DeviceAuthorizationFlow": {
          "Provider": "hosted",
          "ProviderConfig": {
            "ClientID": "{{ .IDP_CLIENT_ID }}",
            "ClientSecret": "",
            "Domain": "keycloak.example.com",
            "Audience": "{{ .IDP_CLIENT_ID }}",
            "TokenEndpoint": "https://keycloak.example.com/auth/realms/netbird/protocol/openid-connect/token",
            "DeviceAuthEndpoint": "https://keycloak.example.com/auth/realms/netbird/protocol/openid-connect/auth/device",
            "AuthorizationEndpoint": "",
            "Scope": "openid",
            "UseIDToken": false,
            "RedirectURLs": null
          }
        },
        "PKCEAuthorizationFlow": {
          "ProviderConfig": {
            "ClientID": "{{ .IDP_CLIENT_ID }}",
            "ClientSecret": "",
            "Domain": "keycloak.example.com",
            "Audience": "{{ .IDP_CLIENT_ID }}",
            "TokenEndpoint": "https://keycloak.example.com/auth/realms/netbird/protocol/openid-connect/token",
            "DeviceAuthEndpoint": "",
            "AuthorizationEndpoint": "",
            "Scope": "openid profile email offline_access api",
            "UseIDToken": false,
            "RedirectURLs": null
          }
        },
        "StoreConfig": {
          "Engine": "postgres"
        },
        "ReverseProxy": {
          "TrustedHTTPProxies": null,
          "TrustedHTTPProxiesCount": 0,
          "TrustedPeers": null
        }
      }

    podCommand:
      args:
        - --port=80
        - --log-file=console
        - --log-level=debug
        - --disable-anonymous-metrics=false
        - --single-account-mode-domain=vpn.example.com
        - --dns-domain=netbird.selfhosted
    image:
      tag: 0.55.1
    persistentVolume:
      enabled: false
    envFromSecret:
      NETBIRD_STORE_ENGINE_POSTGRES_DSN: netbird/postgresDSN
      STUN_SERVER: netbird/stunServer
      TURN_SERVER: netbird/turnServer
      TURN_SERVER_USER: netbird/turnServerUser
      TURN_SERVER_PASSWORD: netbird/turnServerPassword
      RELAY_PASSWORD: netbird/relayPassword
      IDP_CLIENT_ID: netbird/idpClientID
      IDP_CLIENT_MGMT_ID: netbird/idpClientMgmtID
      IDP_CLIENT_MGMT_SECRET: netbird/idpClientMgmtSecret
      IDP_SERVICE_ACCOUNT_USER: netbird/idpServiceAccountUser
      IDP_SERVICE_ACCOUNT_PASSWORD: netbird/idpServiceAccountPassword
      DATASTORE_ENCRYPTION_KEY: netbird/datastoreEncryptionKey
    useBackwardsGrpcService: true
    serviceGrpc:
      annotations:
        traefik.ingress.kubernetes.io/service.serversscheme: h2c
    ingressGrpc:
      enabled: true
      className: traefik-cert-manager
      tls:
        - hosts:
            - vpn.example.com
          secretName: vpn.example.com
      hosts:
        - host: vpn.example.com
          paths:
            - path: /management
              pathType: ImplementationSpecific
    ingress:
      enabled: true
      className: traefik-cert-manager
      tls:
        - hosts:
            - vpn.example.com
          secretName: vpn.example.com
      hosts:
        - host: vpn.example.com
          paths:
            - path: /api
              pathType: ImplementationSpecific

  signal:
    image:
      tag: 0.55.1
    service:
      annotations:
        traefik.ingress.kubernetes.io/service.serversscheme: h2c
    ingress:
      enabled: true
      className: traefik-cert-manager
      tls:
        - hosts:
            - vpn.example.com
          secretName: vpn.example.com
      hosts:
        - host: vpn.example.com
          paths:
            - path: /signalexchange
              pathType: ImplementationSpecific

  relay:
    image:
      tag: 0.55.1
    env:
      NB_LOG_LEVEL: info
      NB_LISTEN_ADDRESS: ":33080"
      NB_EXPOSED_ADDRESS: rels://vpn.example.com:443/relay
    envFromSecret:
      NB_AUTH_SECRET: netbird/relayPassword
    ingress:
      enabled: true
      className: traefik-cert-manager
      tls:
        - hosts:
            - vpn.example.com
          secretName: vpn.example.com
      hosts:
        - host: vpn.example.com
          paths:
            - path: /relay
              pathType: ImplementationSpecific

  dashboard:
    enabled: true
    image:
      tag: v2.17.0
    envFromSecret:
      AUTH_CLIENT_ID: netbird/idpClientID
      AUTH_AUDIENCE: netbird/idpClientID
    env:
      # Endpoints
      NETBIRD_MGMT_API_ENDPOINT: https://vpn.example.com:443
      NETBIRD_MGMT_GRPC_API_ENDPOINT: https://vpn.example.com:443
      # OIDC
      AUTH_AUTHORITY: https://keycloak.example.com/auth/realms/Obmondo
      USE_AUTH0: false
      AUTH_SUPPORTED_SCOPES: openid profile email offline_access netbird-vpn-api
      NETBIRD_TOKEN_SOURCE: accessToken
    ingress:
      enabled: true
      className: traefik-cert-manager
      tls:
        - hosts:
            - vpn.example.com
          secretName: vpn.example.com
      hosts:
        - host: vpn.example.com
          paths:
            - path: /
              pathType: ImplementationSpecific

coturn:
  coturn:
    realm: "turn.vpn.example.com"
  service:
    type: NodePort
    externalTrafficPolicy: Cluster
  externalDatabase:
    enabled: false
