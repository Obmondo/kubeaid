{{- if (.Values.pullThroughCache).enabled }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: replace-container-image-registries
  annotations:
    policies.kyverno.io/title: Replace container image registries
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Replaces upstream container image registries, with the given container image proxy cache
      registry.
    kyverno.io/kubernetes-version: "1.27"
    policies.kyverno.io/minversion: 1.11.4
spec:
  mutateExistingOnPolicyUpdate: {{ .Values.pullThroughCache.mutateExistingOnPolicyUpdate }}
  rules:
    {{- range $upstreamRegistryIndex, $upstreamRegistry := $.Values.upstreamRegistries }}
    - name: replace-{{ $upstreamRegistry }}
      match:
        any:
          - resources:
              kinds:
                - Pod
              operations:
                - CREATE
                - UPDATE
      mutate:
        foreach:
          - list: request.object.spec.initContainers[]
            context:
              {{/* You can get to know about the imageData context variable from here :
                   https://github.com/kyverno/kyverno/blob/main/pkg/imageverification/imagedataloader/loader_test.go. */}}
              - name: imageData
                imageRegistry:
                  reference: "{{`{{ element.image }}`}}"
            preconditions:
              any:
                - key: "{{`{{ imageData.registry }}`}}"
                  operator: Equals
                  value: {{ $upstreamRegistry }}
            patchStrategicMerge:
              spec:
                initContainers:
                  - name: "{{`{{ element.name }}`}}"
                    image: {{ $.Values.pullThroughCache.proxyRegistry }}/{{`{{ imageData.resolvedImage }}`}}
          - list: request.object.spec.containers[]
            context:
              - name: imageData
                imageRegistry:
                  reference: "{{`{{ element.image }}`}}"
            preconditions:
              any:
                - key: "{{`{{ imageData.registry }}`}}"
                  operator: Equals
                  value: {{ $upstreamRegistry }}
            patchStrategicMerge:
              spec:
                containers:
                  - name: "{{`{{ element.name }}`}}"
                    image: {{ $.Values.pullThroughCache.proxyRegistry }}/{{`{{ imageData.resolvedImage }}`}}
    {{- end }}
{{- end }}
